qfunc encoding(x: qnum, ancilla: qnum, y: qbit) {
  inplace_prepare_amplitudes([0.7071, 0.7071], 0.01, x);
  unitary([
    [1.0, 0.0],
    [0.0, (-1.0)]
  ], y);
  control (y == 0) {
    unitary([
      [
        0.6065,
        0.6065,
        0.4289,
        0.2476,
        0.1238,
        0.0554,
        0.0226,
        0.0085
      ],
      [
        0.6065,
        0.065,
        (-0.6611),
        (-0.3817),
        (-0.1909),
        (-0.0854),
        (-0.0348),
        (-0.0132)
      ],
      [
        0.4289,
        (-0.6611),
        0.5325,
        (-0.2699),
        (-0.135),
        (-0.0604),
        (-0.0246),
        (-0.0093)
      ],
      [
        0.2476,
        (-0.3817),
        (-0.2699),
        0.8442,
        (-0.0779),
        (-0.0348),
        (-0.0142),
        (-0.0054)
      ],
      [
        0.1238,
        (-0.1909),
        (-0.135),
        (-0.0779),
        0.961,
        (-0.0174),
        (-0.0071),
        (-0.0027)
      ],
      [
        0.0554,
        (-0.0854),
        (-0.0604),
        (-0.0348),
        (-0.0174),
        0.9922,
        (-0.0032),
        (-0.0012)
      ],
      [
        0.0226,
        (-0.0348),
        (-0.0246),
        (-0.0142),
        (-0.0071),
        (-0.0032),
        0.9987,
        (-0.0005)
      ],
      [
        0.0085,
        (-0.0132),
        (-0.0093),
        (-0.0054),
        (-0.0027),
        (-0.0012),
        (-0.0005),
        0.9998
      ]
    ], ancilla);
  } else {
    unitary([
      [
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0
      ]
    ], ancilla);
  }
}

qfunc evolution(x: qnum, ancilla: qnum) {
  control (ancilla == 0) {
    unitary([[1, 0], [0, 1]], x);
  }
  control (ancilla == 1) {
    unitary([[0, 1], [(-1), 0]], x);
  }
  control (ancilla == 2) {
    unitary([[(-1), 0], [0, (-1)]], x);
  }
  control (ancilla == 3) {
    unitary([[0, (-1)], [1, 0]], x);
  }
  control (ancilla == 4) {
    unitary([[1, 0], [0, 1]], x);
  }
  control (ancilla == 5) {
    unitary([[0, 1], [(-1), 0]], x);
  }
  control (ancilla == 6) {
    unitary([[(-1), 0], [0, (-1)]], x);
  }
  control (ancilla == 7) {
    unitary([[0, (-1)], [1, 0]], x);
  }
}

qfunc decoding(ancilla: qnum, y: qbit) {
  control (y == 0) {
    unitary([
      [
        0.6065,
        0.6065,
        0.4289,
        0.2476,
        0.1238,
        0.0554,
        0.0226,
        0.0085
      ],
      [
        0.6065,
        0.065,
        (-0.6611),
        (-0.3817),
        (-0.1909),
        (-0.0854),
        (-0.0348),
        (-0.0132)
      ],
      [
        0.4289,
        (-0.6611),
        0.5325,
        (-0.2699),
        (-0.135),
        (-0.0604),
        (-0.0246),
        (-0.0093)
      ],
      [
        0.2476,
        (-0.3817),
        (-0.2699),
        0.8442,
        (-0.0779),
        (-0.0348),
        (-0.0142),
        (-0.0054)
      ],
      [
        0.1238,
        (-0.1909),
        (-0.135),
        (-0.0779),
        0.961,
        (-0.0174),
        (-0.0071),
        (-0.0027)
      ],
      [
        0.0554,
        (-0.0854),
        (-0.0604),
        (-0.0348),
        (-0.0174),
        0.9922,
        (-0.0032),
        (-0.0012)
      ],
      [
        0.0226,
        (-0.0348),
        (-0.0246),
        (-0.0142),
        (-0.0071),
        (-0.0032),
        0.9987,
        (-0.0005)
      ],
      [
        0.0085,
        (-0.0132),
        (-0.0093),
        (-0.0054),
        (-0.0027),
        (-0.0012),
        (-0.0005),
        0.9998
      ]
    ], ancilla);
  } else {
    unitary([
      [
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0
      ],
      [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0
      ]
    ], ancilla);
  }
  unitary([
    [1.0, 0.0],
    [0.0, (-1.0)]
  ], y);
}

qfunc main(output x: qnum<1>, output ancilla: qnum<3>, output y: qbit) {
  allocate(x);
  allocate(ancilla);
  allocate(y);
  encoding(x, ancilla, y);
  evolution(x, ancilla);
  decoding(ancilla, y);
}
